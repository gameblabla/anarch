/**
  @file assets.h

  This file containts sounds and music that can optionally be used by the game
  frontend. Every sound effect has 2048 samples, is stored as 8kHz mono format
  with 4 bit quantization, meaning every sound effect takes 1024 bytes. Sounds
  can be converted using a provided python script like this:

  python snd2array.py sound.raw

  Music is based on bytebeat (procedural waveforms generated by short bitwise
  operation formulas). The formulas were NOT copied from anywhere, they were
  discovered from scratch.

  by Miloslav Ciz (drummyfish), 2019

  Released under CC0 1.0 (https://creativecommons.org/publicdomain/zero/1.0/)
  plus a waiver of all other intellectual property. The goal of this work is to
  be and remain completely in the public domain forever, available for any use
  whatsoever.
*/

#ifndef _SFG_SOUNDS_H
#define _SFG_SOUNDS_H

#define SFG_SFX_SAMPLE_COUNT 2048
#define SFG_SFX_SIZE (SFG_SFX_SAMPLE_COUNT / 2)

/**
  Gets an 8bit sound sample.
*/
#define SFG_GET_SFX_SAMPLE(soundIndex,sampleIndex) \
  ((SFG_PROGRAM_MEMORY_U8(SFG_sounds + soundIndex * SFG_SFX_SIZE \
  + sampleIndex / 2) << (4 * ((sampleIndex % 2) != 0))) & 0xf0)

#define SFG_TRACK_SAMPLES (512 * 1024)
#define SFG_TRACK_COUNT 6

/**
  Average value of each music track, can be used to correct DC offset issues if
  they appear.
*/
SFG_PROGRAM_MEMORY uint8_t SFG_musicTrackAverages[SFG_TRACK_COUNT] =
  {14,7,248,148,6,8};

struct
{ // all should be initialized to 0 by default
  uint8_t track;
  uint32_t t;      // time variable/parameter
  uint32_t t2;     // stores t squared, for better performance
  uint32_t n11t;   // stores a multiple of 11, for better performance
} SFG_MusicState;



/**
  Switches the bytebeat to next music track.
*/
void SFG_nextMusicTrack()
{

}
#endif // guard
